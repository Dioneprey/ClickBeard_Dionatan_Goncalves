// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    CLIENT
    ADMIN
}

enum AppointmentStatus {
    SCHEDULED
    IN_PROGRESS
    COMPLETED
    CANCELLED
}

model User {
    id        String    @id @default(uuid())
    name      String
    email     String    @unique
    password  String
    role      Role      @default(CLIENT)
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    Appointment Appointment[]

    @@map("users")
}

model Barber {
    id         String   @id
    name       String
    birthDate  DateTime
    hiringDate DateTime
    photo      String?

    BarberSpecialities BarberSpecialities[]
    Appointment        Appointment[]

    @@map("barbers")
}

model Speciality {
    id    String  @id @default(uuid())
    name  String
    photo String?
    price Float   @default(0.0)
    time  String  @default("00:00")

    BarberSpecialities BarberSpecialities[]
    Appointment        Appointment[]

    @@map("specialities") // Mapeia para a tabela 'specialities' no banco de dados
}

model BarberSpecialities {
    barberId     String
    specialityId String

    barber     Barber     @relation(fields: [barberId], references: [id])
    speciality Speciality @relation(fields: [specialityId], references: [id])

    @@id([barberId, specialityId])
    @@map("barber_speacialities")
}

model Appointment {
    id        String            @id @default(uuid())
    day       DateTime
    hour      String
    clientId  String
    barberId  String
    serviceId String
    status    AppointmentStatus @default(SCHEDULED)
    createdAt DateTime          @default(now())
    updatedAt DateTime?         @updatedAt

    Client  User       @relation(fields: [clientId], references: [id])
    Service Speciality @relation(fields: [serviceId], references: [id])
    Barber  Barber     @relation(fields: [barberId], references: [id])
}
